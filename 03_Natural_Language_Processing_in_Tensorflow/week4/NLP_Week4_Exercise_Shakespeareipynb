{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "NLP_Week4_Exercise_Shakespeare_Answer.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "BOwsuGQQY9OL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras import regularizers\n",
        "import tensorflow.keras.utils as ku \n",
        "import numpy as np "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SANm6SNyXn1P",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "daf5c8e5-2cb5-4aab-f747-64521e5b4b12"
      },
      "source": [
        "tokenizer = Tokenizer()\n",
        "!wget --no-check-certificate \\\n",
        "    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/sonnets.txt \\\n",
        "    -O /tmp/sonnets.txt\n",
        "data = open('/tmp/sonnets.txt').read()"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2019-10-19 00:15:31--  https://storage.googleapis.com/laurencemoroney-blog.appspot.com/sonnets.txt\n",
            "Resolving storage.googleapis.com (storage.googleapis.com)... 74.125.20.128, 2607:f8b0:400e:c07::80\n",
            "Connecting to storage.googleapis.com (storage.googleapis.com)|74.125.20.128|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 93578 (91K) [text/plain]\n",
            "Saving to: ‘/tmp/sonnets.txt’\n",
            "\n",
            "/tmp/sonnets.txt    100%[===================>]  91.38K  --.-KB/s    in 0.001s  \n",
            "\n",
            "2019-10-19 00:15:31 (102 MB/s) - ‘/tmp/sonnets.txt’ saved [93578/93578]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dKBwMulyXpIe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "corpus = data.lower().split(\"\\n\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "txjNR_PLYFKR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "tokenizer.fit_on_texts(corpus)\n",
        "total_words = len(tokenizer.word_index) + 1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "PRnDnCW-Z7qv",
        "colab": {}
      },
      "source": [
        "tokenizer = Tokenizer()\n",
        "!wget --no-check-certificate \\\n",
        "    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/sonnets.txt \\\n",
        "    -O /tmp/sonnets.txt\n",
        "data = open('/tmp/sonnets.txt').read()\n",
        "\n",
        "corpus = data.lower().split(\"\\n\")\n",
        "\n",
        "\n",
        "tokenizer.fit_on_texts(corpus)\n",
        "total_words = len(tokenizer.word_index) + 1\n",
        "\n",
        "# create input sequences using list of tokens\n",
        "input_sequences = []\n",
        "for line in corpus:\n",
        "\ttoken_list = tokenizer.texts_to_sequences([line])[0]\n",
        "\tfor i in range(1, len(token_list)):\n",
        "\t\tn_gram_sequence = token_list[:i+1]\n",
        "\t\tinput_sequences.append(n_gram_sequence)\n",
        "\n",
        "\n",
        "# pad sequences \n",
        "max_sequence_len = max([len(x) for x in input_sequences])\n",
        "input_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n",
        "\n",
        "# create predictors and label\n",
        "predictors, label = input_sequences[:,:-1],input_sequences[:,-1]\n",
        "\n",
        "label = ku.to_categorical(label, num_classes=total_words)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w9vH8Y59ajYL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 642
        },
        "outputId": "39a20223-bbcc-46e2-bb34-2f62901390d4"
      },
      "source": [
        "model = Sequential()\n",
        "model.add(Embedding(total_words, 100, input_length=max_sequence_len-1))\n",
        "model.add(Bidirectional(LSTM(150, return_sequences = True)))\n",
        "model.add(Dropout(0.2))\n",
        "model.add(LSTM(100))\n",
        "model.add(Dense(total_words/2, activation='relu', kernel_regularizer=regularizers.l2(0.01)))\n",
        "model.add(Dense(total_words, activation='softmax'))\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "print(model.summary())\n"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/initializers.py:119: calling RandomUniform.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "If using Keras pass *_constraint arguments to layers.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/init_ops.py:97: calling GlorotUniform.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/init_ops.py:97: calling Orthogonal.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/init_ops.py:97: calling Zeros.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding (Embedding)        (None, 10, 100)           321100    \n",
            "_________________________________________________________________\n",
            "bidirectional (Bidirectional (None, 10, 300)           301200    \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 10, 300)           0         \n",
            "_________________________________________________________________\n",
            "lstm_1 (LSTM)                (None, 100)               160400    \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 1605)              162105    \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 3211)              5156866   \n",
            "=================================================================\n",
            "Total params: 6,101,671\n",
            "Trainable params: 6,101,671\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AIg2f1HBxqof",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "5e221e4e-0c36-41b0-ea90-33141927aaed"
      },
      "source": [
        " history = model.fit(predictors, label, epochs=100, verbose=1)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/math_grad.py:1424: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.where in 2.0, which has the same broadcast rule as np.where\n",
            "Train on 15462 samples\n",
            "Epoch 1/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 6.8955 - acc: 0.0215\n",
            "Epoch 2/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 6.4973 - acc: 0.0237\n",
            "Epoch 3/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 6.3652 - acc: 0.0259\n",
            "Epoch 4/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 6.2402 - acc: 0.0299\n",
            "Epoch 5/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 6.1549 - acc: 0.0358\n",
            "Epoch 6/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 6.0724 - acc: 0.0402\n",
            "Epoch 7/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 5.9914 - acc: 0.0419\n",
            "Epoch 8/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 5.9105 - acc: 0.0437\n",
            "Epoch 9/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 5.8069 - acc: 0.0522\n",
            "Epoch 10/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 5.6901 - acc: 0.0579\n",
            "Epoch 11/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 5.5786 - acc: 0.0645\n",
            "Epoch 12/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 5.4592 - acc: 0.0734\n",
            "Epoch 13/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 5.3486 - acc: 0.0783\n",
            "Epoch 14/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 5.2443 - acc: 0.0847\n",
            "Epoch 15/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 5.1386 - acc: 0.0929\n",
            "Epoch 16/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 5.0345 - acc: 0.1023\n",
            "Epoch 17/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.9369 - acc: 0.1060\n",
            "Epoch 18/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.8311 - acc: 0.1145\n",
            "Epoch 19/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.7347 - acc: 0.1221\n",
            "Epoch 20/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.6312 - acc: 0.1339\n",
            "Epoch 21/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.5339 - acc: 0.1447\n",
            "Epoch 22/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.4282 - acc: 0.1532\n",
            "Epoch 23/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.3285 - acc: 0.1652\n",
            "Epoch 24/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.2295 - acc: 0.1791\n",
            "Epoch 25/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.1244 - acc: 0.1926\n",
            "Epoch 26/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 4.0358 - acc: 0.2062\n",
            "Epoch 27/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.9390 - acc: 0.2207\n",
            "Epoch 28/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.8415 - acc: 0.2346\n",
            "Epoch 29/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.7435 - acc: 0.2523\n",
            "Epoch 30/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.6550 - acc: 0.2707\n",
            "Epoch 31/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.5579 - acc: 0.2919\n",
            "Epoch 32/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.4754 - acc: 0.3029\n",
            "Epoch 33/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.3869 - acc: 0.3253\n",
            "Epoch 34/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.3128 - acc: 0.3434\n",
            "Epoch 35/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.2203 - acc: 0.3603\n",
            "Epoch 36/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 3.1530 - acc: 0.3747\n",
            "Epoch 37/100\n",
            "15462/15462 [==============================] - 28s 2ms/sample - loss: 3.0732 - acc: 0.3959\n",
            "Epoch 38/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.9993 - acc: 0.4109\n",
            "Epoch 39/100\n",
            "15462/15462 [==============================] - 28s 2ms/sample - loss: 2.9341 - acc: 0.4239\n",
            "Epoch 40/100\n",
            "15462/15462 [==============================] - 28s 2ms/sample - loss: 2.8594 - acc: 0.4404\n",
            "Epoch 41/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.8002 - acc: 0.4531\n",
            "Epoch 42/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.7400 - acc: 0.4651\n",
            "Epoch 43/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.6745 - acc: 0.4792\n",
            "Epoch 44/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.6150 - acc: 0.4957\n",
            "Epoch 45/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.5520 - acc: 0.5087\n",
            "Epoch 46/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.5073 - acc: 0.5188\n",
            "Epoch 47/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.4610 - acc: 0.5275\n",
            "Epoch 48/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.3942 - acc: 0.5458\n",
            "Epoch 49/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.3467 - acc: 0.5561\n",
            "Epoch 50/100\n",
            "15462/15462 [==============================] - 28s 2ms/sample - loss: 2.2994 - acc: 0.5695\n",
            "Epoch 51/100\n",
            "15462/15462 [==============================] - 28s 2ms/sample - loss: 2.2585 - acc: 0.5777\n",
            "Epoch 52/100\n",
            "15462/15462 [==============================] - 28s 2ms/sample - loss: 2.2169 - acc: 0.5838\n",
            "Epoch 53/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.1628 - acc: 0.5972\n",
            "Epoch 54/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.1153 - acc: 0.6099\n",
            "Epoch 55/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.0803 - acc: 0.6146\n",
            "Epoch 56/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 2.0359 - acc: 0.6260\n",
            "Epoch 57/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 1.9964 - acc: 0.6350\n",
            "Epoch 58/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 1.9591 - acc: 0.6453\n",
            "Epoch 59/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 1.9339 - acc: 0.6472\n",
            "Epoch 60/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 1.8954 - acc: 0.6581\n",
            "Epoch 61/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 1.8672 - acc: 0.6616\n",
            "Epoch 62/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 1.8139 - acc: 0.6757\n",
            "Epoch 63/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 1.7810 - acc: 0.6812\n",
            "Epoch 64/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 1.7544 - acc: 0.6894\n",
            "Epoch 65/100\n",
            "15462/15462 [==============================] - 29s 2ms/sample - loss: 1.7313 - acc: 0.6916\n",
            "Epoch 66/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 1.7037 - acc: 0.7000\n",
            "Epoch 67/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 1.6786 - acc: 0.7029\n",
            "Epoch 68/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 1.6553 - acc: 0.7086\n",
            "Epoch 69/100\n",
            "15462/15462 [==============================] - 30s 2ms/sample - loss: 1.6223 - acc: 0.7146\n",
            "Epoch 70/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.5979 - acc: 0.7186\n",
            "Epoch 71/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.5842 - acc: 0.7216\n",
            "Epoch 72/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.5624 - acc: 0.7285\n",
            "Epoch 73/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.5251 - acc: 0.7376\n",
            "Epoch 74/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.4912 - acc: 0.7414\n",
            "Epoch 75/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.4853 - acc: 0.7433\n",
            "Epoch 76/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.4714 - acc: 0.7451\n",
            "Epoch 77/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.4553 - acc: 0.7475\n",
            "Epoch 78/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.4272 - acc: 0.7547\n",
            "Epoch 79/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.4089 - acc: 0.7572\n",
            "Epoch 80/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.3849 - acc: 0.7654\n",
            "Epoch 81/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.3741 - acc: 0.7626\n",
            "Epoch 82/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.3688 - acc: 0.7635\n",
            "Epoch 83/100\n",
            "15462/15462 [==============================] - 31s 2ms/sample - loss: 1.3407 - acc: 0.7698\n",
            "Epoch 84/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.3200 - acc: 0.7777\n",
            "Epoch 85/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.3290 - acc: 0.7698\n",
            "Epoch 86/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.2959 - acc: 0.7793\n",
            "Epoch 87/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.2901 - acc: 0.7762\n",
            "Epoch 88/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.2827 - acc: 0.7809\n",
            "Epoch 89/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.2711 - acc: 0.7793\n",
            "Epoch 90/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.2451 - acc: 0.7903\n",
            "Epoch 91/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.2279 - acc: 0.7877\n",
            "Epoch 92/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.2192 - acc: 0.7906\n",
            "Epoch 93/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.2034 - acc: 0.7937\n",
            "Epoch 94/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.1880 - acc: 0.7960\n",
            "Epoch 95/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.1917 - acc: 0.7935\n",
            "Epoch 96/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.1817 - acc: 0.7950\n",
            "Epoch 97/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.1676 - acc: 0.7984\n",
            "Epoch 98/100\n",
            "15462/15462 [==============================] - 33s 2ms/sample - loss: 1.1551 - acc: 0.7992\n",
            "Epoch 99/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.1471 - acc: 0.8037\n",
            "Epoch 100/100\n",
            "15462/15462 [==============================] - 32s 2ms/sample - loss: 1.1292 - acc: 0.8046\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1fXTEO3GJ282",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "outputId": "d1c58f9e-cfef-4c78-a32d-18ddc4422f93"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "acc = history.history['acc']\n",
        "loss = history.history['loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'b', label='Training accuracy')\n",
        "plt.title('Training accuracy')\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'b', label='Training Loss')\n",
        "plt.title('Training loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Vc6PHgxa6Hm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "6eeee766-4329-4e9a-9645-d2d6938b9f78"
      },
      "source": [
        "seed_text = \"Help me Obi Wan Kenobi, you're my only hope\"\n",
        "next_words = 100\n",
        "  \n",
        "for _ in range(next_words):\n",
        "\ttoken_list = tokenizer.texts_to_sequences([seed_text])[0]\n",
        "\ttoken_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n",
        "\tpredicted = model.predict_classes(token_list, verbose=0)\n",
        "\toutput_word = \"\"\n",
        "\tfor word, index in tokenizer.word_index.items():\n",
        "\t\tif index == predicted:\n",
        "\t\t\toutput_word = word\n",
        "\t\t\tbreak\n",
        "\tseed_text += \" \" + output_word\n",
        "print(seed_text)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Help me Obi Wan Kenobi, you're my only hope to torture me releasing slain twain twain twain twain bow twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain twain\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E4uByQCTZ1Ae",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}